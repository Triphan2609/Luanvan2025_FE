import axios from "axios";

const apiClient = axios.create({
    baseURL: "http://localhost:8000/api",
    headers: {
        "Content-Type": "application/json",
    },
    timeout: 10000, // Timeout sau 10 gi√¢y
});

// Th√™m Authorization header n·∫øu token t·ªìn t·∫°i
apiClient.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem("accessToken");
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

// Theo d√µi c√°c y√™u c·∫ßu ƒëang refresh token ƒë·ªÉ tr√°nh race condition
let isRefreshing = false;
let failedQueue = [];

// X·ª≠ l√Ω h√†ng ƒë·ª£i c√°c requests ƒëang ch·ªù token m·ªõi
const processQueue = (error, token = null) => {
    failedQueue.forEach((prom) => {
        if (error) {
            prom.reject(error);
        } else {
            prom.resolve(token);
        }
    });

    failedQueue = [];
};

// X·ª≠ l√Ω response v√† c√°c l·ªói
apiClient.interceptors.response.use(
    (response) => {
        // Log responses for debugging
        console.log(
            `üü¢ [API Response] ${response.config.method.toUpperCase()} ${
                response.config.url
            }`,
            {
                status: response.status,
                statusText: response.statusText,
                headers: response.headers,
                data: response.data,
            }
        );
        return response;
    },
    async (error) => {
        // Log error responses
        console.error(
            `üî¥ [API Error] ${error.config?.method?.toUpperCase()} ${
                error.config?.url
            }`,
            {
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: error.response?.data,
                message: error.message,
            }
        );

        const originalRequest = error.config;

        // N·∫øu l·ªói 401 (Unauthorized) v√† ch∆∞a th·ª≠ refresh token
        if (
            error.response &&
            error.response.status === 401 &&
            !originalRequest._retry
        ) {
            // ƒê√°nh d·∫•u request n√†y ƒë√£ th·ª≠ refresh
            originalRequest._retry = true;

            // N·∫øu ƒëang refresh token, th√™m request v√†o h√†ng ƒë·ª£i
            if (isRefreshing) {
                return new Promise((resolve, reject) => {
                    failedQueue.push({ resolve, reject });
                })
                    .then((token) => {
                        originalRequest.headers.Authorization = `Bearer ${token}`;
                        return axios(originalRequest);
                    })
                    .catch((err) => {
                        return Promise.reject(err);
                    });
            }

            isRefreshing = true;

            try {
                // L·∫•y refresh token t·ª´ localStorage
                const refreshToken = localStorage.getItem("refreshToken");

                if (!refreshToken) {
                    throw new Error("Kh√¥ng c√≥ refresh token");
                }

                // G·ªçi API refresh token
                const response = await axios.post(
                    "http://localhost:8000/api/auth/refresh",
                    { refreshToken }
                );

                const { accessToken, refreshToken: newRefreshToken } =
                    response.data;

                // L∆∞u tokens m·ªõi
                localStorage.setItem("accessToken", accessToken);
                if (newRefreshToken) {
                    localStorage.setItem("refreshToken", newRefreshToken);
                }

                // C·∫≠p nh·∫≠t header v√† x·ª≠ l√Ω h√†ng ƒë·ª£i
                originalRequest.headers.Authorization = `Bearer ${accessToken}`;
                processQueue(null, accessToken);
                isRefreshing = false;

                // G·ª≠i l·∫°i request ban ƒë·∫ßu
                return axios(originalRequest);
            } catch (refreshError) {
                // N·∫øu refresh token th·∫•t b·∫°i, ƒëƒÉng xu·∫•t
                localStorage.removeItem("accessToken");
                localStorage.removeItem("refreshToken");
                localStorage.removeItem("user");

                // X·ª≠ l√Ω h√†ng ƒë·ª£i v·ªõi l·ªói
                processQueue(refreshError, null);
                isRefreshing = false;

                // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang ƒëƒÉng nh·∫≠p
                const currentPath = window.location.pathname;
                if (
                    !currentPath.includes("/login") &&
                    !currentPath.includes("/register")
                ) {
                    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p v√† gi·ªØ URL hi·ªán t·∫°i ƒë·ªÉ redirect sau
                    window.location.href = `/login?redirect=${encodeURIComponent(
                        currentPath
                    )}`;
                }

                return Promise.reject(refreshError);
            }
        }

        // C√°c l·ªói kh√°c
        console.error("API Error:", error.response?.data || error.message);
        return Promise.reject(error);
    }
);

export default apiClient;
